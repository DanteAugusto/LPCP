typeDeclarations

    register Rational_t
        int numerador = 0;
        int denominador = 1;
    endRegister

endTypeDeclarations

subprograms
    fun build_rational(int a, int b) -> Rational_t
        Rational_t ret = Default(Rational_t);
        ret->numerador = a;
        ret->denominador = b;

        return ret;
    endFun

    fun is_same_rational(Rational_t a, Rational_t b) -> bool

        return (cast(a->numerador, double) / cast(a->denominador, double)) == (cast(b->numerador, double) / cast(b->denominador, double));
    endFun

    fun sum_rationals(Rational_t a, Rational_t b) -> Rational_t
        
        Rational_t ret = Default(Rational_t);
        ret->numerador = a->numerador * b->denominador + b->numerador * a->denominador;
        ret->denominador = a->denominador * b->denominador;

        return ret;
    endFun

    fun neg_rational(Rational_t a) -> Rational_t
        
        Rational_t ret = Default(Rational_t);
        ret->numerador = -a->numerador; 
        ret->denominador = a->denominador;

        return ret;
    endFun

    fun sub_rationals(Rational_t a, Rational_t b) -> Rational_t
        
        Rational_t ret = Default(Rational_t);
        ret->numerador = a->numerador * b->denominador - b->numerador * a->denominador;
        ret->denominador = a->denominador * b->denominador;

        return ret;
    endFun

    fun mult_rationals(Rational_t a, Rational_t b) -> Rational_t
        
        Rational_t ret = Default(Rational_t);
        ret->numerador = a->numerador * b->numerador;
        ret->denominador = a->denominador * b->denominador;

        return ret;
    endFun

    fun inv_rational(Rational_t a) -> Rational_t
        
        Rational_t ret = Default(Rational_t);
        ret->numerador = a->denominador;
        ret->denominador = a->numerador;

        return ret;
    endFun

    fun div_rationals(Rational_t a, Rational_t b) -> Rational_t

        --Rational_t ret = Default(Rational_t);
        --ret->numerador = a->numerador * b->denominador;
        --ret->denominador = a->denominador * b->numerador;
        --return ret;

        return mult_rationals(a, inv_rational(b));

    endFun

    

endSubprograms

program
    
    puts("Teste de Racionais\n");

    Rational_t a = build_rational(1, 2);
    Rational_t b = build_rational(1, 3);
    Rational_t c = build_rational(1, 2);
    Rational_t d = build_rational(2, 4);

    puts("a = 1/2\n");
    puts("b = 1/3\n");
    puts("c = 1/2\n");
    puts("d = 2/4\n");

    puts("a == b: ");
    puts(is_same_rational(a, b));
    puts("\n");

    puts("a == c: ");
    puts(is_same_rational(a, c));
    puts("\n");

    puts("a == d: ");
    puts(is_same_rational(a, d));
    puts("\n");

    puts("a + b = ");
    Rational_t e = sum_rationals(a, b);
    puts(e->numerador);
    puts("/");
    puts(e->denominador);
    puts("\n");

    puts("a - b = ");
    Rational_t f = sub_rationals(a, b);
    puts(f->numerador);
    puts("/");
    puts(f->denominador);
    puts("\n");

    puts("a * b = ");
    Rational_t g = mult_rationals(a, b);
    puts(g->numerador);
    puts("/");
    puts(g->denominador);
    puts("\n");

    puts("a / b = ");
    Rational_t h = div_rationals(a, b);
    puts(h->numerador);
    puts("/");
    puts(h->denominador);
    puts("\n");

    puts("neg a = ");
    Rational_t i = neg_rational(a);
    puts(i->numerador);
    puts("/");
    puts(i->denominador);
    puts("\n");

    puts("inv a = ");
    Rational_t j = inv_rational(a);
    puts(j->numerador);
    puts("/");
    puts(j->denominador);
    puts("\n");
    




end